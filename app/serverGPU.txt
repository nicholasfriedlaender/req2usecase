from flask import Flask, request, jsonify
import subprocess
import ollama

app = Flask(__name__)

def extract_actors(requirements):
    response = ollama.chat(
        model='Req2UseCaseStep1',
        messages=[{'role': 'user', 'content': requirements}],
        stream=False
    )

    actors = response['message']['content'].strip().split(',')
    return [actor.strip() for actor in actors]

def extract_usecases(requirements, actors):
    actors_list = ', '.join(actors)
    message_content = f"{requirements}\n\nActors: {actors_list}"

    response = ollama.chat(
        model='Req2UseCaseStep2',
        messages=[{'role': 'user', 'content': message_content}],
        stream=False
    )

    use_cases_data = response['message']['content']
    actors_usecases = []

    sections = use_cases_data.strip().split(';')
    
    for section in sections:
        if section.strip():
            actor_part = section.split(':')
            if len(actor_part) == 2:
                actor = actor_part[0].strip()
                use_cases = [use_case.strip() for use_case in actor_part[1].split(',') if use_case.strip()]
                actors_usecases.append({
                    'actor': actor,
                    'useCases': use_cases
                })
    return actors_usecases

def extract_model(requirements, relationships):
    message_content = f'''
    Model the use case diagram. The Relationships are: {relationships}. The requirements are: {requirements}
    '''    
    response = ollama.chat(
        model='Req2UseCaseStep3',
        messages=[{'role': 'user', 'content': message_content}],
        stream=False
    )
    
    diagram = response['message']['content'].strip()
    print(diagram)
    return diagram

def extract_refinement(message, plantUML, useCaseDescription):
    message_content = f'''
    Refinement instrctions are: {message}. The plantUML code is the following: {plantUML}. The useCaseDescription is: {useCaseDescription}. Do not add new attributes to the useCasedescription. Keep attributes actors, summary, description and steps. Important: Return the useCaseDescription as json String and add at the beginning jsonStart and at the end jsonEnd.
    '''    
    response = ollama.chat(
        model='Req2UseCaseStep4',
        messages=[{'role': 'user', 'content': message_content}],
        stream=False
    )
    
    refinement = response['message']['content'].strip()
    print(refinement)
    return refinement


@app.route('/llama/model', methods=['POST'])
def generate_model():
    try:
        data = request.json
        requirements = data.get('requirements')
        relationships = data.get('relationships')

        if not requirements:
            return jsonify({'error': 'Requirements are missing'}), 400
        if not relationships:
            return jsonify({'error': 'Relationships are missing'}), 400

        diagram = extract_model(requirements, relationships)

        return jsonify({
            'diagram': diagram
        }), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/llama/refine', methods=['POST'])
def refine_model():
    try:
        data = request.json
        message = data.get('message')
        plantUML = data.get('plantUML')
        useCaseDescription = data.get('useCaseDescription')


        if not message:
            return jsonify({'error': 'message is missing'}), 400
        if not plantUML:
            return jsonify({'error': 'plantUML is missing'}), 400
        if not useCaseDescription:
            return jsonify({'error': 'useCaseDescription is missing'}), 400   

        refinement = extract_refinement(message, plantUML, useCaseDescription)

        return jsonify({
            'refinement': refinement
        }), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/llama/actors', methods=['POST'])
def generate_actors():
    try:
        data = request.json
        requirements = data.get('requirements')

        if not requirements:
            return jsonify({'error': 'Requirements are missing'}), 400

        actors = extract_actors(requirements)

        return jsonify({
            'actors': actors
        }), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/llama/useCases', methods=['POST'])
def generate_usecase():
    try:
        data = request.json
        requirements = data.get('requirements')
        actors = data.get('actors')

        if not requirements:
            return jsonify({'error': 'Requirements are missing'}), 400

        useCases = extract_usecases(requirements, actors)

        return jsonify({
            'useCases': useCases
        }), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500



if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
